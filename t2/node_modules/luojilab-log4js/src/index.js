// var fs = require('fs')
// var path = require('path')
// var os = require('os')
var log4js = require('log4js');
var logConfigure = require('./config');
var sentryKey = require('./sentryKey')
var logout = log4js.getLogger('out');
var logerr = log4js.getLogger('err');
var project = require(process.cwd() + '/package.json').name;
var uniqueKey = Math.random().toString(36).substr(2, 15) + ';';
var env = process.env.SERVER_CONFIG;
// var devLogPath = os.homedir() + '/data/logs/node/' + project + '/'
var logPath = '/data/logs/node/' + project  + '/'
// 
// var mkdirsSync = function (dirname) {
//   if (fs.existsSync(dirname)) {
//     return true
//   } else {
//     if (mkdirsSync(path.dirname(dirname))) {
//       fs.mkdirSync(dirname)
//       return true
//     }
//   }
// }
// 
// mkdirsSync(devLogPath)
// 
// logPath = env === 'development' ? devLogPath : logPath

if (env === 'production') {
  var Raven = require('raven');
  Raven.config(sentryKey[project], {environment: env}).install();
}

log4js.configure(logConfigure(logPath).config);

var logger = {
  loginfo: function(msg) {
    logout.info(uniqueKey + msg);
  },
  logwarn: function(msg) {
    logout.warn(uniqueKey + msg);
    logerr.warn(uniqueKey + msg);
  },
  logerr: function(msg) {
    logout.error(uniqueKey + msg);
    logerr.error(uniqueKey + msg);
    if (env === 'production') {
      Raven.captureException(msg);
    }
  },
  prefix: function(newKey) {
    uniqueKey = uniqueKey + newKey + ";";
  },
  info: function() {
    switch (arguments.length) {
      case 0:
        throw new Error('传入参数不能为空');
        break;
      case 1:
        logout.info(uniqueKey + arguments[0]);
        break;
      case 2:
        var timestamp = Math.random().toString(18).substr(2, 15) + new Date().getTime();
        logout.info(uniqueKey + arguments[0] + ';' + timestamp);
        logout.info(timestamp + ';' + arguments[1]);
        break;
      default:
        throw new Error('最多只能接收两个参数');
        break;
    }
  },
  warn: function(msg) {
    logout.warn(uniqueKey + msg);
    logerr.warn(uniqueKey + msg);
  },
  error: function(msg) {
    logout.error(uniqueKey + msg);
    logerr.error(uniqueKey + msg);
    if (env === 'production') {
      Raven.captureException(uniqueKey + msg);
    }
  }
}

exports.logger = logger;

exports.use = function(app) {
  if (env === 'production') {
    app.use(Raven.requestHandler());
    app.use(Raven.errorHandler());
  }
  app.use(log4js.connectLogger(log4js.getLogger('out'), {format: logConfigure(logPath).format}));
}